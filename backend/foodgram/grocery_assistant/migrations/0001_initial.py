# Generated by Django 3.2.18 on 2023-05-09 13:09

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Ingredients',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ingr_name', models.CharField(db_index=True, max_length=256, verbose_name='Название ингридиента')),
                ('measurement_unit', models.CharField(blank=True, db_index=True, max_length=20, verbose_name='Единица измерения')),
            ],
            options={
                'verbose_name_plural': 'Ингридиенты',
            },
        ),
        migrations.CreateModel(
            name='Ingredients_list',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1, 'Минимальное значение >= 1')], verbose_name='Колличество ингридиента')),
                ('ingr_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ingredients_lists', to='grocery_assistant.ingredients', verbose_name='Ингридиент')),
            ],
            options={
                'verbose_name_plural': 'Список ингридиентов',
            },
        ),
        migrations.CreateModel(
            name='Recipes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recipe_name', models.CharField(db_index=True, max_length=256, verbose_name='Рецепт')),
                ('image', models.ImageField(blank=True, null=True, upload_to='image/', verbose_name='Картинка')),
                ('description', models.TextField(verbose_name='Описание')),
                ('cooking_time', models.IntegerField(verbose_name='Время приготовления')),
                ('public_date', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Дата публикации')),
                ('ingredients_lists', models.ManyToManyField(through='grocery_assistant.Ingredients_list', to='grocery_assistant.Ingredients')),
            ],
            options={
                'verbose_name_plural': 'Рецепты',
                'ordering': ['-public_date', 'recipe_name'],
            },
        ),
        migrations.CreateModel(
            name='Tags',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tag_name', models.CharField(db_index=True, max_length=256, unique=True, verbose_name='Тег')),
                ('color', models.CharField(db_index=True, max_length=16, unique=True, verbose_name='Цвет тега')),
                ('slug', models.SlugField(max_length=20, unique=True, verbose_name='Slag тег')),
            ],
            options={
                'verbose_name_plural': 'Теги',
            },
        ),
        migrations.CreateModel(
            name='Shoping_list',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recipes_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recipes_shoping_list', to='grocery_assistant.recipes')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_shoping_list', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Список покупок',
            },
        ),
        migrations.AddField(
            model_name='recipes',
            name='tags',
            field=models.ManyToManyField(to='grocery_assistant.Tags'),
        ),
        migrations.AddField(
            model_name='recipes',
            name='user_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='author_recipes', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь'),
        ),
        migrations.AddField(
            model_name='ingredients_list',
            name='recipes_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recipes_list', to='grocery_assistant.recipes', verbose_name='Рецепт'),
        ),
        migrations.CreateModel(
            name='Follow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='author', to=settings.AUTH_USER_MODEL)),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Подписки на автора',
                'verbose_name_plural': 'Подписки на автора',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='Favorite_recipes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recipes_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favorite', to='grocery_assistant.recipes', verbose_name='Рецепт')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favorite', to=settings.AUTH_USER_MODEL, verbose_name='Пользовтель')),
            ],
            options={
                'verbose_name': 'Любимые рецепты',
                'verbose_name_plural': 'Любимые рецепты',
            },
        ),
        migrations.AddConstraint(
            model_name='follow',
            constraint=models.UniqueConstraint(fields=('user_id', 'author'), name='grocery_assistant_follow_unique'),
        ),
        migrations.AddConstraint(
            model_name='favorite_recipes',
            constraint=models.UniqueConstraint(fields=('user_id', 'recipes_id'), name='unique_favorite'),
        ),
    ]
